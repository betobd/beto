<?xml version = "1.0" encoding="iso-8859-1" standalone="no"?>
<globalscripts>
  <globalscript class="script">/**/
/* Script partag&#233; de l&apos;application */
/* Ensemble des fonctions communes &#224; toute l&apos;application */
/*
/* Une partie des fonctions sont recopi&#233;es du projet IAM au 24/11/2015
/**/ 

/////////////////////
// Debut du script //
/////////////////////

/////////////////////////////////
// Fonctions issues du projet IAM
/////////////////////////////////

/**
  chiffre le fichier de propri&#233;t&#233;s
*/
function chiffrement(properties,propertyNames,file){
  var cle=&quot;zG4mPnJAR3E=&quot;;
  var parameters=new Parameters();
  var i=0;
   while (propertyNames.hasMoreElements()) {    
      var name=propertyNames.nextElement();
      if (name.indexOf(&quot;Ciphered-&quot;)&gt;-1){
           var property=properties.getProperty(name);
           if (property.indexOf(&quot;Ciphered{&quot;)&gt;-1){
               property=property.replace(&quot;Ciphered{&quot;,&quot;&quot;);
               property=property.substring(0,property.length()-1);
               property=crypto.DESdecrypt(property,cle);
           }else {
              file.open(&quot;a&quot;);
              var propertyEncrypt=crypto.DESencrypt(property,cle);
              properties.setProperty(name,&quot;Ciphered{&quot;+propertyEncrypt+&quot;}&quot;);
              var outPutStream=new java.io.FileOutputStream(file.getJavaFile());
              properties.store(outPutStream, name+&quot;=Ciphered{&quot;+propertyEncrypt+&quot;}&quot;);
              file.close();
           }
           parameters.add(name.replace(&quot;Ciphered-&quot;,&quot;&quot;),property);
        }else{
          var property=properties.getProperty(name);
          parameters.add(name,property);
        }          
      i++;
    }
    return parameters;
}


/**
   r&#233;cup&#232;re les param&#232;tres pr&#233;sents dans le fichier de propri&#233;t&#233;s des droits
*/
function getProvisioningParameters_Droit(){
  var file=meibo.getFile(&quot;b-com_TRAVEL_droits.properties&quot;);
  file.open(&quot;r&quot;);
  var properties=file.getAsProperties();
  var propertyNames=properties.propertyNames();
  var parameters=chiffrement(properties,propertyNames,file);
  file.close();
  return parameters;
}
/**
  r&#233;cup&#232;re les param&#232;tres pr&#233;sents dans le fichier de propri&#233;t&#233;s des processus
*/
function getProvisioningParameters_Workflows(){
  var file=meibo.getFile(&quot;b-com_TRAVEL_workflows.properties&quot;);
  file.open(&quot;r&quot;);
  var properties=file.getAsProperties();
  var propertyNames=properties.propertyNames();
  var parameters=chiffrement(properties,propertyNames,file);
  file.close();
  return parameters;
}
/**
  r&#233;cup&#232;re les param&#232;tres pr&#233;sents dans le fichier de propri&#233;t&#233;s des mails
*/
function getProvisioningParameters_Mails(){
  var file=meibo.getFile(&quot;b-com_TRAVEL_mails.properties&quot;);
  file.open(&quot;r&quot;);
  var properties=file.getAsProperties();
  var propertyNames=properties.propertyNames();
  var parameters=chiffrement(properties,propertyNames,file);
  file.close();
  return parameters;
}
/**
  r&#233;cup&#232;re les param&#232;tres pr&#233;sents dans le fichier de propri&#233;t&#233;s g&#233;n&#233;ral
*/
function getProvisioningParameters_General(){
  var file=meibo.getFile(&quot;b-com_TRAVEL.properties&quot;);
  file.open(&quot;r&quot;);
  var properties=file.getAsProperties();
  var propertyNames=properties.propertyNames();
  var parameters=chiffrement(properties,propertyNames,file);
  file.close();
  return parameters;
}

/**
   retourne chaine vide si la chaine est null
*/
function returnEmpty(chaine){
  if ( chaine == null) {
    chaine = &quot;&quot;;
  }
  return chaine;
}

/**
  initialise les ressources du projet
*/
function initializeResources(){
  var parameters = getProvisioningParameters_General();
  /**********************************************/
  /*     Source de donn&#233;es Active Directory     */
  /**********************************************/
  /*Ressource Group*/
  var BCOM_AD_OU_ACCES = returnEmpty(parameters.get(&quot;BCOM_AD_OU_ACCES&quot;));
  if ( BCOM_AD_OU_ACCES != &quot;&quot; ){
    meibo.changeResourceBase(&quot;Acces&quot;,BCOM_AD_OU_ACCES); 
  }
  /*Ressource Group*/
  var BCOM_AD_OU_GROUP = returnEmpty(parameters.get(&quot;BCOM_AD_OU_GROUP&quot;));
  if ( BCOM_AD_OU_GROUP != &quot;&quot; ){
    meibo.changeResourceBase(&quot;Group&quot;,BCOM_AD_OU_GROUP); 
  }
  /*Ressource GroupProject*/
  var BCOM_AD_OU_GROUP_PROJECT = returnEmpty(parameters.get(&quot;BCOM_AD_OU_GROUP_PROJECT&quot;));
  if ( BCOM_AD_OU_GROUP_PROJECT != &quot;&quot; ){
    meibo.changeResourceBase(&quot;GroupProject&quot;,BCOM_AD_OU_GROUP_PROJECT); 
  }
  /*Ressource GroupAll*/
  var BCOM_AD_OU_GROUP_ALL = returnEmpty(parameters.get(&quot;BCOM_AD_OU_GROUP_ALL&quot;));
  if ( BCOM_AD_OU_GROUP_ALL != &quot;&quot; ){
    meibo.changeResourceBase(&quot;GroupAll&quot;,BCOM_AD_OU_GROUP_ALL); 
  }
  /*Ressource GroupUser*/
  var BCOM_AD_OU_GROUP_USER = returnEmpty(parameters.get(&quot;BCOM_AD_OU_GROUP_USER&quot;));
  if ( BCOM_AD_OU_GROUP_USER != &quot;&quot; ){
    meibo.changeResourceBase(&quot;GroupUser&quot;,BCOM_AD_OU_GROUP_USER); 
  }
  /*Ressource People*/
  var BCOM_AD_OU_PEOPLE = returnEmpty(parameters.get(&quot;BCOM_AD_OU_PEOPLE&quot;));
  if ( BCOM_AD_OU_PEOPLE != &quot;&quot; ){
    meibo.changeResourceBase(&quot;People&quot;,BCOM_AD_OU_PEOPLE); 
  }
  /*Ressource Role*/
  var BCOM_AD_OU_ROLE = returnEmpty(parameters.get(&quot;BCOM_AD_OU_ROLE&quot;));
  if ( BCOM_AD_OU_ROLE != &quot;&quot; ){
    meibo.changeResourceBase(&quot;Role&quot;,BCOM_AD_OU_ROLE); 
  }
  /*Ressource RoleStatus*/
  var BCOM_AD_OU_ROLE_STATUS = returnEmpty(parameters.get(&quot;BCOM_AD_OU_ROLE_STATUS&quot;));
  if ( BCOM_AD_OU_ROLE_STATUS != &quot;&quot; ){
    meibo.changeResourceBase(&quot;RoleStatus&quot;,BCOM_AD_OU_ROLE_STATUS); 
  }
  var BCOM_AD_OU_ROLE_STATUS = returnEmpty(parameters.get(&quot;BCOM_AD_OU_ROLE_STATUS&quot;));
  if ( BCOM_AD_OU_ROLE_STATUS != &quot;&quot; ){
    meibo.changeResourceBase(&quot;RoleStatusSansExterne&quot;,BCOM_AD_OU_ROLE_STATUS); 
  }
  /*Ressource RoleOPERATION*/
  var BCOM_AD_OU_ROLE_OPERATION = returnEmpty(parameters.get(&quot;BCOM_AD_OU_ROLE_OPERATION&quot;));
  if ( BCOM_AD_OU_ROLE_OPERATION != &quot;&quot; ){
    meibo.changeResourceBase(&quot;RoleOperation&quot;,BCOM_AD_OU_ROLE_OPERATION); 
  }
  /*Ressource RoleApplication*/
  var BCOM_AD_OU_ROLE_APPLICATION = returnEmpty(parameters.get(&quot;BCOM_AD_OU_ROLE_APPLICATION&quot;));
  if ( BCOM_AD_OU_ROLE_APPLICATION != &quot;&quot; ){
    meibo.changeResourceBase(&quot;RoleApplication&quot;,BCOM_AD_OU_ROLE_APPLICATION); 
  }
   /*Ressource RolePosition*/
  var BCOM_AD_OU_ROLE_POSITION = returnEmpty(parameters.get(&quot;BCOM_AD_OU_ROLE_POSITION&quot;));
  if ( BCOM_AD_OU_ROLE_POSITION != &quot;&quot; ){
    meibo.changeResourceBase(&quot;RolePosition&quot;,BCOM_AD_OU_ROLE_POSITION); 
  }
  /**********************************************/
  /*     Source de donn&#233;es 2     */
  /**********************************************/
  /*Ressource 1*/
  
  /*Ressource 2*/
  
  /*Ressource 3*/

}
/**
  Fonction qui d&#233;tecte si c&apos;est un membre d&apos;un groupe est de type r&#244;le ou autre.
*/
function detectedRoleInGroup(member){
  var test = &quot;false&quot;;
  var parameters = getProvisioningParameters_General();
  var ouPers = parameters.get(&quot;BCOM_AD_OU_PEOPLE&quot;);
  if ( member.indexOf(ouPers) == -1 ){
    var entry = returnEmpty(meibo.getDnEntry(&quot;Role&quot;,member,&quot;member,cn&quot;));
    if ( entry != &quot;&quot; ){
      var nbAttribute = entry.getAttributeCount();
      if (nbAttribute != 0 ){
        test = entry.cn[0];
      }
    }
  }
  return test; 
}

/**
  ajoute le r&#244;le utilisateur.
*/
function addRoleMeiboUtilisateur(DNPERS,PARAM,ROLE){
  if ( PARAM != &quot;&quot; ){ //-- SI VARIABLE NON VIDE
    var split_BFU = PARAM.split(&quot;|&quot;);//-- SPLIT les groupes pour les r&#233;cup&#233;rer sous forme de tableau
    var nbGGU = split_BFU.length(); //-- Calcul du nombre du groupe
    var i = 0; //-- Initialisation d&apos;un incr&#233;ment
    var filtreUtilisateur = &quot;&quot;;//-- Initialisation du filtre utilisateur
    while ( i &lt; nbGGU ) { //-- D&#233;but boucle sur le nombre de groupes utilisateur
      if ( i == 0 ){ //-- SI c&apos;est le premier groupe
        filtreUtilisateur = &quot;(CN=&quot; + split_BFU[i] + &quot;)&quot;; //-- Calcul du filtre
      }
      else{ //-- SINON
        filtreUtilisateur = filtreUtilisateur + &quot;(CN=&quot; + split_BFU[i] + &quot;)&quot;;//-- Calcul du filtre
      }
      i++;//-- Incr&#233;mentation
    }//-- Fin boucle sur le nombre de groupe utilisateur
    if ( nbGGU &gt; 0 ){ //-- SI AU MOINS 1 GROUPE
      filtreUtilisateur = &quot;(|&quot; + filtreUtilisateur + &quot;)&quot;; //-- Calcul du filtre
      var groupUser = meibo.executeResource(&quot;GroupUser&quot;,&quot;(&amp;(member=&quot; + DNPERS + &quot;) &quot; + filtreUtilisateur + &quot;)&quot;,0,&quot;dn&quot;);//-- Recherche de la personne dans les groupes utilisateurs
      var nbEntries_groupUser = groupUser.getEntryCount();//-- R&#233;cup&#232;re le nombre de r&#233;sultats
      if ( nbEntries_groupUser &gt; 0 ){ //-- SI AU MOINS 1 RESULTAT
        meibo.addUserRole(ROLE); //-- Ajout le profil UTILISATEUR
      }
      else{//-- SINON
        var groupUser = meibo.executeResource(&quot;GroupUser&quot;, filtreUtilisateur ,0,&quot;member&quot;);//-- Recherche des groupes utilisateurs 
        var nbEntries_groupUser = groupUser.getEntryCount();//-- R&#233;cup&#232;re le nombre de r&#233;sultats
        if ( nbEntries_groupUser &gt; 0 ){ //-- SI AU MOINS 1 RESULTAT
          var j = 0;//-- Initialisation d&apos;un incr&#233;ment
          while ( j &lt; nbEntries_groupUser ){ //-- D&#233;but boucle sur le nombre de groupe utilisateur
            var members = returnEmpty(groupUser.getEntry(j).getAttribute(&quot;member&quot;));//-- R&#233;cup&#232;re les membres pour le groupe
            if ( members != &quot;&quot; ){
              var nbMember = members.getCount();//-- R&#233;cup&#232;re le nombre de membre pour le groupe
              var k = 0;//-- Initialisation d&apos;un incr&#233;ment
              while ( k &lt; nbMember ){//-- D&#233;but boucle sur le nombre membre du groupe
                var mb = members.getValue(k); //-- r&#233;cup&#233;ration membre par membre
                var test = returnEmpty(detectedRoleInGroup(mb)); //-- D&#233;tection si le membre est un r&#244;le ou autre
                if ( ( test != &quot;&quot; ) &amp;&amp; ( test != &quot;false&quot; ) ){
                  var role = meibo.executeResource(&quot;Role&quot;,&quot;(&amp;(member=&quot; + DNPERS + &quot;) (CN=&quot; + test + &quot;) )&quot;,0,&quot;dn&quot;);//-- Recherche de la personne dans le r&#244;le utilisateurs   
                  var nbEntries_role = role.getEntryCount();//-- R&#233;cup&#232;re le nombre de r&#233;sultats
                  if ( nbEntries_role &gt; 0 ){ //-- SI AU MOINS 1 RESULTAT
                    meibo.addUserRole(ROLE); //-- Ajout le profil UTILISATEUR
                    break;
                  }
                }
                k++;//-- Incr&#233;mentation
              }//-- Fin boucle sur le nombre membre du groupe
            }  
            j++;//-- Incr&#233;mentation
          }//-- Fin boucle sur le nombre de groupe utilisateur
        }
      } 
    }
  }  


}
/**
  Fonction qui ajoute les autres r&#244;les.
*/
function addRoleMeibo(DNPERS,PARAM,ROLE){
  if ( PARAM != &quot;&quot; ){ //-- SI VARIABLE NON VIDE
    var split_BFU = PARAM.split(&quot;|&quot;);//-- SPLIT les groupes pour les r&#233;cup&#233;rer sous forme de tableau
    var nbGGR = split_BFU.length(); //-- Calcul du nombre du groupe
    var i = 0; //-- Initialisation d&apos;un incr&#233;ment
    var filtreUtilisateur = &quot;&quot;;//-- Initialisation du filtre utilisateur
    while ( i &lt; nbGGR ) { //-- D&#233;but boucle sur le nombre de groupe utilisateur
      if ( i == 0 ){ //-- SI c&apos;est le premier groupe
        filtreUtilisateur = &quot;(CN=&quot; + split_BFU[i] + &quot;)&quot;; //-- Calcul du filtre
      }
      else{ //-- SINON
        filtreUtilisateur = filtreUtilisateur + &quot;(CN=&quot; + split_BFU[i] + &quot;)&quot;;//-- Calcul du filtre
      }
      i++;//-- Incr&#233;mentation
    }//-- Fin boucle sur le nombre de groupe utilisateur
    if ( nbGGR &gt; 0 ){ //-- SI AU MOINS 1 GROUPE
      if ( nbGGR &gt; 1 ){
        filtreUtilisateur = &quot;(|&quot; + filtreUtilisateur + &quot;)&quot;; //-- Calcul du filtre
      }
      var RoleOperation = meibo.executeResource(&quot;RoleApplication&quot;,&quot;(&amp;(member=&quot; + DNPERS + &quot;) &quot; + filtreUtilisateur + &quot;)&quot;,0,&quot;dn&quot;);//-- Recherche de la personne dans le role operation
      var nbEntries_RoleOperation = RoleOperation.getEntryCount();//-- R&#233;cup&#232;re le nombre de r&#233;sultats
      if ( nbEntries_RoleOperation &gt; 0 ){ //-- SI AU MOINS 1 RESULTAT
        meibo.addUserRole(ROLE); //-- Ajout le profil UTILISATEUR
      }
      else{//-- SINON
        var RoleOperation = meibo.executeResource(&quot;RoleApplication&quot;, filtreUtilisateur ,0,&quot;member&quot;);//-- Recherche des groupes utilisateurs 
        var nbEntries_RoleOperation = RoleOperation.getEntryCount();//-- R&#233;cup&#232;re le nombre de r&#233;sultats
        if ( nbEntries_RoleOperation &gt; 0 ){ //-- SI AU MOINS 1 RESULTAT
          var j = 0;//-- Initialisation d&apos;un incr&#233;ment
          while ( j &lt; nbEntries_RoleOperation ){ //-- D&#233;but boucle sur le nombre de groupe utilisateur
            var members = returnEmpty(RoleOperation.getEntry(j).getAttribute(&quot;member&quot;));//-- R&#233;cup&#232;re les membres pour le groupe
            if ( members != &quot;&quot; ){ //-- SI MEMBER EST RENSEIGNE
              var nbMember = members.getCount();//-- R&#233;cup&#232;re le nombre de membre pour le groupe
              var k = 0;//-- Initialisation d&apos;un incr&#233;ment
              while ( k &lt; nbMember ){//-- D&#233;but boucle sur le nombre membre du role
                var mb = members.getValue(k); //-- r&#233;cup&#233;ration membre par membre
                var test = returnEmpty(detectedRoleInGroup(mb)); //-- D&#233;tection si le membre est un r&#244;le ou autre
                if ( ( test != &quot;&quot; ) &amp;&amp; ( test != &quot;false&quot; ) ){
                  var role = meibo.executeResource(&quot;Role&quot;,&quot;(&amp;(member=&quot; + DNPERS + &quot;) (CN=&quot; + test + &quot;) )&quot;,0,&quot;dn&quot;);//-- Recherche de la personne dans le r&#244;le utilisateurs   
                  var nbEntries_role = role.getEntryCount();//-- R&#233;cup&#232;re le nombre de r&#233;sultats
                  if ( nbEntries_role &gt; 0 ){ //-- SI AU MOINS 1 RESULTAT
                    meibo.addUserRole(ROLE); //-- Ajout le profil UTILISATEUR
                    break;
                  }
                }
                k++;//-- Incr&#233;mentation
              }//-- Fin boucle sur le nombre membre du groupe
            }  
            j++;//-- Incr&#233;mentation
          }//-- Fin boucle sur le nombre de role operation
        }
      } 
    }
  }  


}

/**
  Fonction qui normalise une chaine de caract&#232;re sans accent, sans espace, sans apostrophe, sans tiret et sans caract&#232;res sp&#233;ciaux .   
*/
function normalize(chaine)
{
  chaine=chaine.toLowerCase();
  chaine=chaine.replace(&quot;&#224;&quot;,&quot;a&quot;);
  chaine=chaine.replace(&quot;&#225;&quot;,&quot;a&quot;);
  chaine=chaine.replace(&quot;&#228;&quot;,&quot;a&quot;);
  chaine=chaine.replace(&quot;&#226;&quot;,&quot;a&quot;);
  chaine=chaine.replace(&quot;&#227;&quot;,&quot;a&quot;);
  chaine=chaine.replace(&quot;&#230;&quot;,&quot;ae&quot;);
  chaine=chaine.replace(&quot;&#233;&quot;,&quot;e&quot;);
  chaine=chaine.replace(&quot;&#234;&quot;,&quot;e&quot;);
  chaine=chaine.replace(&quot;&#232;&quot;,&quot;e&quot;);
  chaine=chaine.replace(&quot;&#235;&quot;,&quot;e&quot;);
  chaine=chaine.replace(&quot;&#238;&quot;,&quot;i&quot;);
  chaine=chaine.replace(&quot;&#239;&quot;,&quot;i&quot;);
  chaine=chaine.replace(&quot;&#236;&quot;,&quot;i&quot;);
  chaine=chaine.replace(&quot;&#237;&quot;,&quot;i&quot;);
  chaine=chaine.replace(&quot;&#244;&quot;,&quot;o&quot;);
  chaine=chaine.replace(&quot;&#245;&quot;,&quot;o&quot;);
  chaine=chaine.replace(&quot;&#246;&quot;,&quot;o&quot;);
  chaine=chaine.replace(&quot;&#242;&quot;,&quot;o&quot;);
  chaine=chaine.replace(&quot;&#243;&quot;,&quot;o&quot;);
  chaine=chaine.replace(&quot;&#249;&quot;,&quot;u&quot;);
  chaine=chaine.replace(&quot;&#251;&quot;,&quot;u&quot;);
  chaine=chaine.replace(&quot;&#252;&quot;,&quot;u&quot;);
  chaine=chaine.replace(&quot;&#250;&quot;,&quot;u&quot;);
  chaine=chaine.replace(&quot;&#255;&quot;,&quot;y&quot;);
  chaine=chaine.replace(&quot;&#231;&quot;,&quot;c&quot;);
  chaine=chaine.replace(&quot;&#241;&quot;,&quot;n&quot;);
  chaine=chaine.replace(&quot;/&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;\\&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;$&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;*&quot;,&quot;&quot;);//pour les caract&#232;res joker
  chaine=chaine.replace(&quot;%&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;!&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;@&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;|&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;(&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;)&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;[&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;]&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;=&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;+&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;&amp;&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;?&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;,&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;!&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;);&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;.&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;&#181;&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;%&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;:&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;&#167;&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;^&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;&#168;&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;}&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;{&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;#&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;&#176;&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot; &quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;&apos;&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;-&quot;,&quot;&quot;);
  chaine=chaine.toUpperCase();
 return chaine;
}


/**
  Fonction qui normalise une chaine de caract&#232;re sans accent, sans espace, sans apostrophe, sans tiret et sans caract&#232;res sp&#233;ciaux .   
*/
function normalizeGivenName(chaine)
{
  chaine=chaine.toLowerCase();
  chaine=chaine.replace(&quot;&#224;&quot;,&quot;a&quot;);
  chaine=chaine.replace(&quot;&#225;&quot;,&quot;a&quot;);
  chaine=chaine.replace(&quot;&#228;&quot;,&quot;a&quot;);
  chaine=chaine.replace(&quot;&#226;&quot;,&quot;a&quot;);
  chaine=chaine.replace(&quot;&#227;&quot;,&quot;a&quot;);
  chaine=chaine.replace(&quot;&#230;&quot;,&quot;ae&quot;);
  chaine=chaine.replace(&quot;&#233;&quot;,&quot;e&quot;);
  chaine=chaine.replace(&quot;&#234;&quot;,&quot;e&quot;);
  chaine=chaine.replace(&quot;&#232;&quot;,&quot;e&quot;);
  chaine=chaine.replace(&quot;&#235;&quot;,&quot;e&quot;);
  chaine=chaine.replace(&quot;&#238;&quot;,&quot;i&quot;);
  chaine=chaine.replace(&quot;&#239;&quot;,&quot;i&quot;);
  chaine=chaine.replace(&quot;&#236;&quot;,&quot;i&quot;);
  chaine=chaine.replace(&quot;&#237;&quot;,&quot;i&quot;);
  chaine=chaine.replace(&quot;&#244;&quot;,&quot;o&quot;);
  chaine=chaine.replace(&quot;&#245;&quot;,&quot;o&quot;);
  chaine=chaine.replace(&quot;&#246;&quot;,&quot;o&quot;);
  chaine=chaine.replace(&quot;&#242;&quot;,&quot;o&quot;);
  chaine=chaine.replace(&quot;&#243;&quot;,&quot;o&quot;);
  chaine=chaine.replace(&quot;&#249;&quot;,&quot;u&quot;);
  chaine=chaine.replace(&quot;&#251;&quot;,&quot;u&quot;);
  chaine=chaine.replace(&quot;&#252;&quot;,&quot;u&quot;);
  chaine=chaine.replace(&quot;&#250;&quot;,&quot;u&quot;);
  chaine=chaine.replace(&quot;&#255;&quot;,&quot;y&quot;);
  chaine=chaine.replace(&quot;&#231;&quot;,&quot;c&quot;);
  chaine=chaine.replace(&quot;&#241;&quot;,&quot;n&quot;);
  chaine=chaine.replace(&quot;/&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;\\&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;$&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;*&quot;,&quot;&quot;);//pour les caract&#232;res joker
  chaine=chaine.replace(&quot;%&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;!&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;@&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;|&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;(&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;)&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;[&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;]&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;=&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;+&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;&amp;&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;?&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;,&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;!&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;);&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;.&quot;,&quot;&quot;);//pour les num&#233;ros de t&#233;l&#233;phone
  chaine=chaine.replace(&quot;&#181;&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;%&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;:&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;&#167;&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;^&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;&#168;&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;}&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;{&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;#&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;&#176;&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;-&quot;,&quot; &quot;);
  chaine=chaine.replace(&quot;&apos;&quot;,&quot; &quot;);
  chaine=chaine.toUpperCase();
 return chaine;
}

/**
  Fonction qui normalise une chaine de caract&#232;re sans accent, sans apostrophe, sans caract&#232;res sp&#233;ciaux et remplacement de l&apos;espace par tiret .   
*/
function normalizeMail(chaine)
{
  chaine=chaine.toLowerCase();
  chaine=chaine.replace(&quot;&#224;&quot;,&quot;a&quot;);
  chaine=chaine.replace(&quot;&#225;&quot;,&quot;a&quot;);
  chaine=chaine.replace(&quot;&#228;&quot;,&quot;a&quot;);
  chaine=chaine.replace(&quot;&#226;&quot;,&quot;a&quot;);
  chaine=chaine.replace(&quot;&#227;&quot;,&quot;a&quot;);
  chaine=chaine.replace(&quot;&#230;&quot;,&quot;ae&quot;);
  chaine=chaine.replace(&quot;&#233;&quot;,&quot;e&quot;);
  chaine=chaine.replace(&quot;&#234;&quot;,&quot;e&quot;);
  chaine=chaine.replace(&quot;&#232;&quot;,&quot;e&quot;);
  chaine=chaine.replace(&quot;&#235;&quot;,&quot;e&quot;);
  chaine=chaine.replace(&quot;&#238;&quot;,&quot;i&quot;);
  chaine=chaine.replace(&quot;&#239;&quot;,&quot;i&quot;);
  chaine=chaine.replace(&quot;&#236;&quot;,&quot;i&quot;);
  chaine=chaine.replace(&quot;&#237;&quot;,&quot;i&quot;);
  chaine=chaine.replace(&quot;&#244;&quot;,&quot;o&quot;);
  chaine=chaine.replace(&quot;&#245;&quot;,&quot;o&quot;);
  chaine=chaine.replace(&quot;&#246;&quot;,&quot;o&quot;);
  chaine=chaine.replace(&quot;&#242;&quot;,&quot;o&quot;);
  chaine=chaine.replace(&quot;&#243;&quot;,&quot;o&quot;);
  chaine=chaine.replace(&quot;&#249;&quot;,&quot;u&quot;);
  chaine=chaine.replace(&quot;&#251;&quot;,&quot;u&quot;);
  chaine=chaine.replace(&quot;&#252;&quot;,&quot;u&quot;);
  chaine=chaine.replace(&quot;&#250;&quot;,&quot;u&quot;);
  chaine=chaine.replace(&quot;&#255;&quot;,&quot;y&quot;);
  chaine=chaine.replace(&quot;&#231;&quot;,&quot;c&quot;);
  chaine=chaine.replace(&quot;&#241;&quot;,&quot;n&quot;);
  chaine=chaine.replace(&quot;/&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;\\&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;$&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;*&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;%&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;!&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;@&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;|&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;(&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;)&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;[&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;]&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;=&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;+&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;&amp;&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;?&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;,&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;!&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;);&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;.&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;&#181;&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;%&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;:&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;&#167;&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;^&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;&#168;&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;}&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;{&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;#&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot;&#176;&quot;,&quot;&quot;);
  chaine=chaine.replace(&quot; &quot;,&quot;-&quot;);
  chaine=chaine.replace(&quot;&apos;&quot;,&quot;&quot;);
  chaine=chaine.toUpperCase();
 return chaine;
}


/**
  Fonction qui met en forme le nom et pr&#233;nom.
*/
function miseEnForme(chaine){
  var m = 0;
  var newChaine = &quot;&quot;;
  var cara =&quot;&quot;;
  for(var j = 0;j&lt;chaine.length();j++){
     var cara = chaine.charAt(j);
     
     if (m == 0){
        cara = cara.toUpperCase();
        m++; 
     }
     else{
        if ((cara == &quot;-&quot;) || (cara == &quot; &quot;)){
          m=0;   
        }
        else{
          cara = cara.toLowerCase();
        }  
     }
      newChaine = newChaine+ cara;
      
  }
  return newChaine;
}
/**
  Fonction r&#233;cup&#232;res les mails destinataire selon le role.
*/
function getAdressMailByRole(PARAM){
  var sendMail = &quot;&quot;; //-- initialisation de la variable des mails destinataire
  if ( PARAM != &quot;&quot; ){ //-- SI VARIABLE NON VIDE
    var split_BFU = PARAM.split(&quot;|&quot;);//-- SPLIT les groupes pour les r&#233;cup&#233;rer sous forme de tableau
    var nbGGR = split_BFU.length(); //-- Calcul du nombre du groupe
    var i = 0; //-- Initialisation d&apos;un incr&#233;ment
    var filtreUtilisateur = &quot;&quot;;//-- Initialisation du filtre utilisateur
    while ( i &lt; nbGGR ) { //-- D&#233;but boucle sur le nombre de groupe utilisateur
      if ( i == 0 ){ //-- SI c&apos;est le premier groupe
        filtreUtilisateur = &quot;(CN=&quot; + split_BFU[i] + &quot;)&quot;; //-- Calcul du filtre
      }
      else{ //-- SINON
        filtreUtilisateur = filtreUtilisateur + &quot;(CN=&quot; + split_BFU[i] + &quot;)&quot;;//-- Calcul du filtre
      }
      i++;//-- Incr&#233;mentation
    }//-- Fin boucle sur le nombre de groupe utilisateur
    if ( nbGGR &gt; 0 ){ //-- SI AU MOINS 1 GROUPE
      if ( nbGGR &gt; 1 ){
        filtreUtilisateur = &quot;(|&quot; + filtreUtilisateur + &quot;)&quot;; //-- Calcul du filtre
      }
      var RoleApplication = meibo.executeResource(&quot;RoleApplication&quot;, filtreUtilisateur ,0,&quot;member&quot;);//-- Recherche des groupes utilisateurs 
      var nbEntries_RoleApplication = RoleApplication.getEntryCount();//-- R&#233;cup&#232;re le nombre de r&#233;sultats
      if ( nbEntries_RoleApplication &gt; 0 ){ //-- SI AU MOINS 1 RESULTAT
        var j = 0;//-- Initialisation d&apos;un incr&#233;ment
        /////////////////////////////////////////////
        //Boucle sur les groupes NIVEAU LE PLUS HAUT
        /////////////////////////////////////////////
        while ( j &lt; nbEntries_RoleApplication ){ //-- D&#233;but boucle sur le nombre de groupe utilisateur
          var members = returnEmpty(RoleApplication.getEntry(j).getAttribute(&quot;member&quot;));//-- R&#233;cup&#232;re les membres pour le groupe
          if ( members != &quot;&quot; ){ //-- SI MEMBER EST RENSEIGNE
            var nbMember = members.getCount();//-- R&#233;cup&#232;re le nombre de membre pour le groupe
            var k = 0;//-- Initialisation d&apos;un incr&#233;ment
            /////////////////////////////////////////////////////////
            //Boucle sur les membres des groupes NIVEAU LE PLUS HAUT
            /////////////////////////////////////////////////////////
            while ( k &lt; nbMember ){//-- D&#233;but boucle sur le nombre membre du role
              var mb = members.getValue(k); //-- r&#233;cup&#233;ration membre par membre
              var test = returnEmpty(detectedRoleInGroup(mb)); //-- D&#233;tection si le membre est un r&#244;le ou autre
              if ( ( test != &quot;&quot; ) &amp;&amp; ( test != &quot;false&quot; ) ){//--SI LE MEMBRE EST UN GROUPE N-1
                var role = meibo.executeResource(&quot;Role&quot;,&quot;(CN=&quot; + test + &quot;)&quot;,0,&quot;member&quot;);//-- Recherche des membres des groupe N-1   
                var nbEntries_role = role.getEntryCount();//-- R&#233;cup&#232;re le nombre de r&#233;sultats
                if ( nbEntries_role &gt; 0 ){ //-- SI AU MOINS 1 RESULTAT
                  var m = 0;
                  var membersNivMoins1 = role.getEntry().getAttribute(&quot;member&quot;);
                  var nbMembersNivMoins1 = membersNivMoins1.getCount();
                  /////////////////////////////////////////////////////////
                  //Boucle sur les membres des groupes NIVEAU N-1
                  /////////////////////////////////////////////////////////
                  while( m &lt; nbMembersNivMoins1 ){
                    var mbNivMoins1 = membersNivMoins1.getValue(m);
                    var testNMoins1 = returnEmpty(detectedRoleInGroup(mbNivMoins1)); //-- D&#233;tection si le membre est un r&#244;le ou autre
                    if ( testNMoins1 == &quot;false&quot; ){// SI LE MEMBRE EST UNE PERSONNE
                      var entryPers = returnEmpty(meibo.getDnEntry(&quot;People&quot;,mbNivMoins1,&quot;mail&quot;));//-- entr&#233;e de la personne
                      if ( entryPers != &quot;&quot; ){//-- si personne trouv&#233; dans AD
                        var mail = returnEmpty(entryPers.mail[0]);//-- R&#233;cup&#233;ration du mail de la personne
                        if ( mail != &quot;&quot; ){//SI LA PERSONNE A UN MAIL DE RENSEIGNE
                          if ( sendMail == &quot;&quot; ){//-- SI la varaible sendMail est vide
                            sendMail = mail; //-- Ajout du premier mail &#224; la variable sendMail
                          }
                          else{//-- SINON
                            sendMail = sendMail + &quot;,&quot; + mail; //-- Ajout des autre mail &#224; la variable sendMail
                          }
                        }
                      }  
                    }
                    m++;//--incr&#233;mentation
                  }
                }
              }
              else{//-- SINON LE MEMBRE EST UNE PERSONNE
                var entryPers = returnEmpty(meibo.getDnEntry(&quot;People&quot;,mb,&quot;mail&quot;));//-- entr&#233;e de la personne
                if ( entryPers != &quot;&quot; ){//-- si personne trouv&#233; dans AD
                  var mail = returnEmpty(entryPers.mail[0]);//-- R&#233;cup&#233;ration du mail de la personne
                  if ( mail != &quot;&quot; ){//SI LA PERSONNE A UN MAIL DE RENSEIGNE
                    if ( sendMail == &quot;&quot; ){//-- SI la varaible sendMail est vide
                      sendMail = mail;//-- Ajout du premier mail &#224; la variable sendMail
                    }
                    else{//-- SINON
                      sendMail = sendMail + &quot;,&quot; + mail;//-- Ajout des autre mail &#224; la variable sendMail
                    }
                  }
                }
              }
              k++;//-- Incr&#233;mentation
            }//-- Fin boucle sur le nombre membre du groupe
          }  
          j++;//-- Incr&#233;mentation
        }//-- Fin boucle sur le nombre de role operation
      }
    }
  }
  return sendMail; //-- retourne la chaine des mails destinataire
}
/**
  Fonction qui tranforme une date ldap en une date mise en forme pour l&apos;affichage.
*/
function getDateString(dateLdap){
  var dateString = dateLdap.substring(6,8)+&quot;/&quot;+dateLdap.substring(4,6)+&quot;/&quot;+dateLdap.substring(0,4);
  
  return dateString; 
}
/**
  Fonction qui v&#233;rifie s&apos;il y a un groupe manager.
*/
function checkManager(groupe){
  var check = &quot;FALSE&quot;;
  if ( returnEmpty(groupe) != &quot;&quot; ){
    var entry = meibo.getDnEntry(&quot;Role&quot;,groupe,&quot;managedBy&quot;);
    var managedBy = returnEmpty(entry.managedBy[0]);
    if ( managedBy != &quot;&quot; ){
      check = managedBy;
    }    
  }
  return check;
}
/**
  Fonction qui r&#233;cup&#232;re les mails des membres du groupe.
*/
function  getMailMemberGrp(managedBy){
  var sendMail = &quot;&quot;;
  if ( returnEmpty(managedBy) != &quot;&quot; ){
    var entry = meibo.getDnEntry(&quot;Role&quot;,managedBy,&quot;member&quot;);
    var member = returnEmpty(entry.getAttribute(&quot;member&quot;));
    if ( ( member != &quot;&quot; ) &amp;&amp; ( member.getCount() &gt; 0 ) ){
      var i = 0;
      while ( i &lt; member.getCount()){
        var entryPers = returnEmpty(meibo.getDnEntry(&quot;People&quot;,member.getValue(i),&quot;mail&quot;));
        if (entryPers != &quot;&quot; ){ 
          var mail = returnEmpty(entryPers.mail[0]); 
          if ( mail != &quot;&quot; ){
            if ( i == 0 ){
              sendMail = mail;
            }
            else{
              sendMail = sendMail + &quot;,&quot; + mail;
            }
          }
        }
        i++;
      }
    
    }
    
  }
  
  return sendMail;
}

/**
  Fonction qui converti un affichage date en date ldap .
*/
function getDateLdapInverse(date){
  /*slipt sur &quot;/&quot;*/
  var dateSplit = date.split(&quot;/&quot;);
  /*r&#233;cup&#232;re l&apos;ann&#233;e au format date*/
  var year = parseInt(dateSplit[2]) - 1900;
  /*r&#233;cup&#232;re le mois au format date*/
  var month = parseInt(dateSplit[1]) - 1;
  /*r&#233;cup&#232;re le jour au format date*/
  var day = parseInt(dateSplit[0]);
  /*cr&#233;e la date au format date*/
  var newDate = new Date(year,month,day,6,0,0,0);
  /*transforme le date au format LDAP */
  var  dateLdap = newDate.toLdapString();
  return dateLdap; 
}
/**
  Fonction qui converti date en seconde depuis 1601 .
*/
function /*java.math.BigInteger*/getTotalSecondsSince1601(){
  var iYearsFrom1601to1970 = 1970 - 1601; //369;
  var iDaysFrom1601to1970 = iYearsFrom1601to1970 * 365; //134685 ; //
  iDaysFrom1601to1970 = iDaysFrom1601to1970 + (iYearsFrom1601to1970 / 4); // leap years //134777;//
  iDaysFrom1601to1970 = iDaysFrom1601to1970 - 3; // non-leap centuries (1700,1800,1900).  2000 is a leap century // 134774 ; //
  iDaysFrom1601to1970 = new java.math.BigInteger(&quot;&quot;+iDaysFrom1601to1970);
  //var iSecondsFrom1601to1970 = iDaysFrom1601to1970 * 24 * 60 * 60;
  var iSecondsFrom1601to1970 = iDaysFrom1601to1970.multiply(new java.math.BigInteger(&quot;24&quot;));
  iSecondsFrom1601to1970 = iSecondsFrom1601to1970.multiply(new java.math.BigInteger(&quot;60&quot;));
  iSecondsFrom1601to1970 = iSecondsFrom1601to1970.multiply(new java.math.BigInteger(&quot;60&quot;));
  return iSecondsFrom1601to1970;
}
/**
 convert an ad date to a java date
*/
//128959704000000000
function /*Date*/convertDateStringFromAD(/*string*/adDate){
  var bigDate = new java.math.BigInteger(adDate);  
  var iSecondsFrom1601to1970 = getTotalSecondsSince1601(); 
  //12895970400
  var iTotalSecondsSince1601 =  bigDate.divide( new java.math.BigInteger(&quot;10000000&quot;));
  //var iTotalSecondsSince1970 = (iTotalSecondsSince1601 - iSecondsFrom1601to1970);
  var iTotalSecondsSince1970 =  iTotalSecondsSince1601.add(iSecondsFrom1601to1970.negate());
  var iTotalMillisecondSecondsSince1970 =iTotalSecondsSince1970.multiply(new java.math.BigInteger(&quot;1000&quot;));
  //var result = new java.util.Date(new java.lang.Long(iTotalSecondsSince1970 * 1000));
  var result = new Date( new java.util.Date(iTotalMillisecondSecondsSince1970.longValue()));
  return result;
}
/**
convert a java date to an ad date
*/
function /*string*/convertDateToStringAD(/*Date*/ javaDate){
  var adDate = null;
  var javaDate2 = javaDate.getJavaDate();
  var iSecondsFrom1601to1970 = getTotalSecondsSince1601();
  var time = javaDate2.getTime();
  var iTotalMillisecondSecondsSince1970 = new java.math.BigInteger(&quot;&quot; + time);
  var iTotalSecondsSince1970 = iTotalMillisecondSecondsSince1970.divide(new java.math.BigInteger(&quot;1000&quot;));
  var iTotalSecondsSince1601 =  iTotalSecondsSince1970.add(iSecondsFrom1601to1970); 
  //ajout d&apos;une journ&#233;e dans la date
  iTotalSecondsSince1601= iTotalSecondsSince1601.add( new java.math.BigInteger(&quot;86400&quot;));
  var adDate =  iTotalSecondsSince1601.multiply( new java.math.BigInteger(&quot;10000000&quot;)); 
  return &quot;&quot; +adDate.longValue();
}


/**
  Fonction qui converti date ldap en java date .
*/
function getDateLdapToJavaDate(dateLdap){
  
  /*r&#233;cup&#232;re l&apos;ann&#233;e au format date*/
  var year = parseInt(dateLdap.substring(0,4)) - 1900;
  /*r&#233;cup&#232;re le mois au format date*/
  var month = parseInt(dateLdap.substring(4,6)) - 1;
  /*r&#233;cup&#232;re le jour au format date*/
  var day = parseInt(dateLdap.substring(6,8));
  /*cr&#233;e la date au format date*/
  var newDate = new Date(year,month,day,6,0,0,0);
  /*transforme le date au format LDAP */
  
  return newDate; 
}

/////////////////////////////////
// Fin des Fonctions issues du projet IAM
/////////////////////////////////

/////////////////////////////////
// Fonctions g&#233;n&#233;r&#233;es par assistants Meibo
/////////////////////////////////
// check if a mandatory field is not empty.
// If the field is empty, an error is displayed in an error field.
// The function returns false if the field is empty.
function /*boolean*/ checkMandatoryField(/*String*/ valueField, /*int*/ tabNumber) {
  var /*boolean*/ ok = false;
  var /*String*/ labelField = &quot;label&quot; + valueField;
  var /*String*/ value = meibo.getFieldValue(valueField);
  if ((value != null) &amp;&amp; (value.trim().length &gt; 0)) {
    ok = true;
  }
  else {
    var /*String*/ msg = null;
    try {
      msg = meibo.getMessage(&quot;MandatoryField&quot;, meibo.getFieldValue(labelField));
    }
    catch (ex) {
    }
    if (msg == null) {
      if (meibo.getUserLanguage() == &quot;fr&quot;) {
        msg = &quot;Le champ &apos;&quot; + meibo.getFieldValue(labelField) + &quot;&apos; est obligatoire.&quot;;
      }
      else {
        msg = &quot;Field &apos;&quot; + meibo.getFieldValue(labelField) + &quot;&apos; is mandatory.&quot;;
      }
    }
    meibo.getField(&quot;error&quot;).setValue(msg);
    meibo.showField(&quot;error&quot;, true);
    meibo.setActiveTab(tabNumber);
  }
  return ok;
}

// display search result in a table.
// This function uses input parameters from fields in view and fills a table
// named &quot;results&quot;.
function /*void*/ displaySearch(/*String*/ resource, /*String*/ attrs) {

  // compute current page
  var /*int*/ pageSize = parseInt(meibo.getFieldValue(&quot;pageSize&quot;));
  var /*int*/ page = parseInt(meibo.getFieldValue(&quot;page&quot;));
  var /*int*/ pages = parseInt(meibo.getFieldValue(&quot;pages&quot;));

  // populate table
  var /*int*/ start = (page - 1) * pageSize;
  var /*String*/ filter = meibo.getFieldValue(&quot;filter&quot;);
  var table = meibo.getField(&quot;results&quot;);
  var /*int*/ nEntries = table.fillInWithQuery(resource, filter, start, pageSize, attrs, meibo.getFieldValue(&apos;sortAttribute&apos;));
  if (nEntries == 0) {
    meibo.showField(&quot;error&quot;, true);
  }
  else {
    // show-hide button
    meibo.showField(&quot;error&quot;, false);
    meibo.showField(&quot;next&quot;, page &lt; pages);
    meibo.showField(&quot;last&quot;, page &lt; pages);
    meibo.showField(&quot;previous&quot;, page &gt; 1);
    meibo.showField(&quot;first&quot;, page &gt; 1);
    meibo.getField(&quot;range&quot;).setValue(&quot;Page &quot; + page+ &quot;/&quot; + pages);  
  }
}

// select all lines in a table
function /*void*/ selectAllLines(/*String*/ table) {
  var /*table*/ tab = meibo.getField(table);
  var /*int*/ nbLines = tab.getLength();
  for (var /*int*/ line = 0; line &lt; nbLines; line++) {
    tab.checkRow(line, true);
  }
}

// unselect all lines in a table
function /*void*/ unselectAllLines(/*String*/ table) {
  var /*table*/ tab = meibo.getField(table);
  var /*int*/ nbLines = tab.getLength();
  for (var /*int*/ line = 0; line &lt; nbLines; line++) {
    tab.checkRow(line, false);
  }
}

////////////////////
// Constantes
var GROUPS_SEPARATOR = &quot;|&quot;; // separateur des CN de groupes dans le fichier de configuration des roles/groupes
var ROLES_CONFIG_PREFIX = &quot;BCOM_PROFIL_&quot;; // pr&#233;fix des cl&#233;s de roles dans le fichier de configuration des roles/groupes
//var PROPERTIES_FILE_PREFIX = &quot;b-com_TRAVEL&quot;;
var ROLES_STRING = &quot;Utilisateur|InitiateurDeplacement|AnalyseurDeplacement|OrganisateurVoyage|DDI|AdminMeibo&quot;; // liste des roles meibo &#224; prendre en compte
var ROLES_ARRAY = ROLES_STRING.split(&quot;|&quot;);
var DATE_FORMAT = new java.text.SimpleDateFormat(&quot;dd/MM/yyyy&quot;); // format d&apos;affichage
var DATETIME_FORMAT = new java.text.SimpleDateFormat(&quot;dd/MM/yyyy HH:mm&quot;); // format d&apos;affichage
var SQL_DATE_FORMAT = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;); // format en retour de la base
var SQL_DATETIME_FORMAT = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
var /*Class*/ INTEGER_CLASS = new Class(&quot;java.lang.Integer&quot;);
var /*Class*/ LOCALE_CLASS = new Class(&quot;java.util.Locale&quot;);
var /*Locale*/ USER_LOCALE = LOCALE_CLASS.forLanguageTag(meibo.getUserLanguage());
var /*Class*/ NUMBERFORMAT_CLASS = new Class(&quot;java.text.NumberFormat&quot;);
var /*NumberFormat*/ NUMBERFORMAT_INSTANCE = NUMBERFORMAT_CLASS.getInstance(USER_LOCALE);
var /*String*/ DB_MULTIVALUE_SEPARATOR = &quot;;&quot;; // s&#233;parateur dans les champs texte &quot;multivalu&#233;es&quot; en base de donn&#233;es
var /*Class*/ JAVA_CALENDAR_CLASS = new Class(&quot;java.util.Calendar&quot;);


// nom des variables globales
var GLOBALVAR_CURRENT_USER_ENTRY = &quot;CURRENT_USER_ENTRY&quot;;
var GLOBALVAR_CURRENT_USER_ID = &quot;CURRENT_USER_ID&quot;;
var GLOBALVAR_BACKUP_FIELDS = &quot;BACKUP_FIELDS&quot;;
var GLOBALVAR_BACKUP_SOURCEVIEW_NAME = &quot;BACKUP_SOURCEVIEW_NAME&quot;;
var GLOBALVAR_BACKUP_SOURCERESOURCE_NAME = &quot;BACKUP_SOURCERESOURCE_NAME&quot;;
var GLOBALVAR_BACKUP_SOURCEDN = &quot;BACKUP_SOURCEDN&quot;;
var GLOBALVAR_MAIL_PARAMETERS = &quot;MAIL_PARAMETERS&quot;;

/**
 * R&#233;cup&#232;re un des param&#232;tre de mail g&#233;r&#233;s en configuration (cf. fonction getProvisioningParameters_Mails)
 * les param&#232;tres sont conserv&#233; en variables globales
 */
function /*String*/ getMailParameter(paramName){
  var /*Parameters*/ parameters = meibo.getGlobalVar(GLOBALVAR_MAIL_PARAMETERS);
  if(parameters==null){
    meibo.logDebug(&quot;Chargement des param&#232;tres pour les emails&quot;);
    parameters = getProvisioningParameters_Mails();
    meibo.setGlobalVar(GLOBALVAR_MAIL_PARAMETERS,parameters);
  }
  return parameters.get(paramName);
}

/**
 * Empile la valeur &quot;value&quot; dans la variable globale &quot;name&quot;
 */
function /*void*/ pushGlobalVar(name, value){
  var stack = meibo.getGlobalVar(name);
  if(stack == null){
    stack = new java.util.Stack();
  }
  stack.push(value);
  meibo.setGlobalVar(name, stack);
}

/**
 * D&#233;pile la valeur de la variable globale &quot;name&quot;
 */
function /*Object*/ popGlobalVar(name){
  var stack = meibo.getGlobalVar(name);
  var value = null;
  if((stack != null) &amp;&amp; (!stack.empty())){
    value= stack.pop();
  }
  return value;
}

/**
 * renvoi la derni&#232;re valeur de la variable globale &quot;name&quot;
 * quand c&apos;est une pile
 */
function /*Object*/ peekpGlobalVar(name){
  var stack = meibo.getGlobalVar(name);
  var value = null;
  if((stack != null) &amp;&amp; (!stack.empty())){
    value= stack.peek();
  }
  return value;
}

/**
 * Indique si l&apos;utilisateur est dans le groupe dont le CN est fourni
 */    
function /*boolean*/ isUserInGroup(userDn, groupCn){
  // Recherche en chaine (LDAP_MATCHING_RULE_IN_CHAIN) de la personne dans le(s) groupe(s) role(s)
  // cf. https://msdn.microsoft.com/en-us/library/windows/desktop/aa746475%28v=vs.85%29.aspx
  var roleRS = meibo.executeResource(&quot;GroupAll&quot;,&quot;(&amp;(member:1.2.840.113556.1.4.1941:=&quot; + userDn + &quot;) (CN=&quot; + groupCn + &quot;) )&quot;,0,&quot;dn&quot;);
  return roleRS.getEntryCount()&gt;0;
}

/**
 * Renvoi un resultSet des membres (People) directs ou indirects du groupe
 */
function /*ResultSet&lt;People&gt;*/ getRecursiveGroupMembers(groupDN){
  // cf. https://msdn.microsoft.com/en-us/library/windows/desktop/aa746475%28v=vs.85%29.aspx
  var userRS = meibo.executeResource(&quot;People&quot;,&quot;(memberOf:1.2.840.113556.1.4.1941:=&quot; + groupDN + &quot;)&quot;,0,&quot;dn,cn,mail&quot;);
  return userRS;
}

/**
 * Renvoi un Set des membres (People) directs ou indirects des groupes dont les Cn sont fournis
 */
function /*Set&lt;People&gt;*/ getRecursiveGroupMembersFromGroupNames(groupCnArray){
  var userRS = new java.util.HashSet();
  var /*ResultSet*/ groupRS = null;
  var /*ResultSet*/ memberRS = null;
  var /*Entry*/ groupEntry = null;
  for each(var groupCn in groupCnArray){
    groupRS = meibo.executeResource(&quot;GroupAll&quot;,&quot;(cn=&quot; + groupCn + &quot;)&quot;,1,&quot;dn&quot;);    
    if((groupRS!=null) &amp;&amp; (groupRS.getEntryCount()&gt;0)){
      groupEntry = groupRS.getEntry();
      memberRS = getRecursiveGroupMembers(groupEntry.dn[0]);
      for each(var memberEntry in memberRS){
        userRS.add(memberEntry);
      }
    }else{
      meibo.logWarn(&quot;Pas de groupe trouv&#233; pour le CN &quot; + groupCn);
    }
  }
  return userRS;
}

/**
 * Renvoi un Set des membres (People) directs ou indirects des groupes associ&#233;s au role dont ne nom est fourni
 */
function /*Set&lt;People&gt;*/ getRecursiveGroupMembersForRole(roleName){
  var userRS = new java.util.HashSet();
  var parameters_groupsMapping = getProvisioningParameters_Droit();
  // recupere les CN des groupes associ&#233; au role
  var roleGroupsCN = parameters_groupsMapping.get(ROLES_CONFIG_PREFIX+ roleName);  
  if(roleGroupsCN==null){
    meibo.logWarn(&quot;Pas de configuration trouv&#233;e pour le role &quot; + roleName);
  }else{
    var roleGroupsCNarray=roleGroupsCN.split(GROUPS_SEPARATOR);
    userRS = getRecursiveGroupMembersFromGroupNames(roleGroupsCNarray);
  }
  return userRS; 
}

/**
 * Indique si l&apos;utilisateur a le role fourni (d&apos;apr&#232;s ses groupes AD)
 */    
function /*boolean*/ userHasRole(userDn, roleName, parameters_groupsMapping){
  // recupere les CN des groupes associ&#233; au role
  var roleGroupsCN = parameters_groupsMapping.get(ROLES_CONFIG_PREFIX+ roleName);
  if(roleGroupsCN==null){
    meibo.logWarn(&quot;Pas de configuration trouv&#233;e pour le role &quot; + roleName);
  }else{
    var roleGroupsCNarray=roleGroupsCN.split(GROUPS_SEPARATOR);
    // recherche le 1er groupe correspondant au role
    for each(var roleGroup in roleGroupsCNarray){
      if(isUserInGroup(userDn, roleGroup)){
        return true;
      }
    }
  }
  return false;
}

/**
 * Affecte les roles de l&apos;utilisateur (d&apos;apr&#232;s ses groupes AD et le mapping roles/groupes configur&#233;)
 */
function /*void*/ setUserRoles(userDn){
  //r&#233;cup&#233;ration des param&#232;tres des fichiers properties (mapping CN de groupes AD / nom de role meibo)
  var parameters_groupsMapping = getProvisioningParameters_Droit();
  // parcours des roles definis et ajout si affect&#233; &#224; l&apos;utilisateur d&apos;apr&#232;s l&apos;AD
  meibo.logDebug(&quot;Roles Meibo de l&apos;utilisateur &quot;  + userDn + &quot;:&quot;);
  for each(var roleName in ROLES_ARRAY){
    if(userHasRole(userDn, roleName, parameters_groupsMapping)){
      meibo.addUserRole(roleName);
      meibo.logDebug(&quot;role : &quot; + roleName);
    }
  }             
}

/**
 * Renvoi le contenu d&apos;un tableau Array sous forme de chaine de caract&#232;res, avec le s&#233;parateur indiqu&#233;
 */
function /*String*/ arrayToString(array, separator){
  var resultString = null;
  if(array!=null){
    for each(var item in array){
      if(resultString == null){
        resultString = item;
      }else{
        resultString = resultString + separator + item;
      }
    }
  }
  return resultString;
}

/**
 * Retourne un array constitu&#233; des attributs &apos;attributeName&apos; des entr&#233;es du ResultSet
 */
function /*Array*/ resultSetToArray(resultSet, attributeName){
   var array = new Array(resultSet.getEntryCount());
   var i=0;
   for each(var entry in resultSet){
    array[i] = entry.getAttribute(attributeName)[0];
    i++;    
   }
   return array;
}

/**
 * Recherche le(s) personnes &quot;manager&quot; de l&apos;utilisateur
 * Le manager est celui (ou ceux) qui a (ont) le role de directeur associ&#233; au role fonctionnel de l&apos;utilisateur
 * retour sous la forme d&apos;un ResultSet de People
 */
function /*ResultSet&lt;People&gt;*/ getManager(userDn){
  return meibo.executeLink(&quot;UserManager&quot;,userDn);
}
 
/**
 * Sauvegarde en variables globales le contenu des champs pour une utilisation ult&#233;rieure
 * Permet de g&#233;rer les aller-retours entre formulaires
 */
function /*void*/ backupFields(currentViewResourceName){
  var /*String*/ fieldNamesStr= meibo.getNamedFields();
  var /*Array*/ fieldNamesArray = fieldNamesStr.split(&quot;,&quot;);

  var /*Array*/ fields = new Array(fieldNamesArray.length);
  //var /*Array*/ fieldValues = new Array(fieldNamesArray.length);
  var fieldName= null;
  var fieldValue=null;
  var field=null;
  var fieldType = null;
  
  for(var i=0;i&lt;fieldNamesArray.length;i++){
    fieldName = fieldNamesArray[i];
    field = meibo.getField(fieldName);
    fieldType = typeof(field);
    
    if(fieldType == &quot;field.Edit&quot;){
      fields[i]= field;
      fieldValue = field.getContents();
      //fieldValues[i]= fieldValue;
    }else if((fieldType == &quot;field.Choice&quot;) || (fieldType == &quot;field.Calendar&quot;) || (fieldType == &quot;field.Check&quot;)){
      fields[i]= field;
      fieldValue = meibo.getFieldValue(fieldName)
      //fieldValues[i]= fieldValue;    
    }
  }
  pushGlobalVar(GLOBALVAR_BACKUP_FIELDS + currentViewResourceName + &quot;_&quot; + meibo.getViewName() , fields);
  //pushGlobalVar(GLOBALVAR_BACKUP_FIELDS + &quot;_values_&quot; + currentViewResourceName + &quot;_&quot; + meibo.getViewName() , fieldValues);
}
 
/**
 * Restore le contenu des champs qui aurait &#233;ventuellement &#233;t&#233; sauvegard&#233; en variables globales
 * (permet de g&#233;rer aller-retour entre formulaires)
 */
function /*void*/ restoreFields(currentViewResourceName){
  var /*Array*/ backupFields = popGlobalVar(GLOBALVAR_BACKUP_FIELDS + currentViewResourceName + &quot;_&quot; + meibo.getViewName());
  //var /*Array*/ backupFieldsValues = popGlobalVar(GLOBALVAR_BACKUP_FIELDS + &quot;_values_&quot; + currentViewResourceName + &quot;_&quot; + meibo.getViewName());

  if(backupFields!=null){
    var /*String*/ fieldNamesStr= meibo.getNamedFields();
    var /*Array*/ fieldNamesArray = fieldNamesStr.split(&quot;,&quot;);

    var fieldName= null;
    var fieldValue=null;
    //var fieldValue2=null;
    var field=null;
    var backupField=null;
    var fieldType = null;

    for(var i=0;i&lt;fieldNamesArray.length;i++){
      fieldName = fieldNamesArray[i];
      field = meibo.getField(fieldName);
      fieldType = typeof(field);
      backupField = backupFields[i];
      if(backupField!=null){
        if(fieldType == &quot;field.Edit&quot;){
          fieldValue = backupField.getContents();
          if(fieldValue!=null){
            //fieldValue2 = backupField;
            field.setContents(fieldValue);
          }
        }else if((fieldType == &quot;field.Choice&quot;) || (fieldType == &quot;field.Calendar&quot;) || (fieldType == &quot;field.Check&quot;)){
          fieldValue = backupField.getValue();
          //fieldValue2 = backupField;
          field.setValue(fieldValue);
        }
        //TODO : contenu des tableaux
      }
    }
  }
} 

/**
 * Sauvegarde infos et donn&#233;es de la vue courante
 * (permet de g&#233;rer aller-retour entre formulaires via backToSourceView())
 * passer en param&#232;tre le nom de la ressource associ&#233;e &#224; la vue (car il n&apos;existe pas de fonction meibo pour r&#233;cup&#233;rer cette information)
 */
function /*void*/ backupView(currentViewResourceName){
  backupFields(currentViewResourceName);
  pushGlobalVar(GLOBALVAR_BACKUP_SOURCEVIEW_NAME, meibo.getViewName());
  var dn= meibo.getCurrentDn();
  if(dn!=null){
    pushGlobalVar(GLOBALVAR_BACKUP_SOURCEDN, meibo.getCurrentDn());
  }else{
    pushGlobalVar(GLOBALVAR_BACKUP_SOURCEDN, &quot;&quot;);
  }  
  pushGlobalVar(GLOBALVAR_BACKUP_SOURCERESOURCE_NAME, currentViewResourceName);
  var entry=meibo.getCurrentEntry();
 
}

/**
 * Indique si une vue source est d&#233;finie en variable globale pour y effectuer un retour
 */
function /*void*/ hasSourceView(){
  var /*Object*/ value = peekpGlobalVar(GLOBALVAR_BACKUP_SOURCEVIEW_NAME);
  return (value!=null);
}

/**
 * Retour &#224; la vue d&apos;o&#249; l&apos;on vient, si celle-ci est d&#233;finie en variable globale
 * Implique d&apos;avoir appel&#233; backupView() avant de quitter la vue
 */
function /*void*/ backToSourceView(){
  var /*String*/ sourceViewName = popGlobalVar(GLOBALVAR_BACKUP_SOURCEVIEW_NAME);
  var /*String*/ sourceResourceName = popGlobalVar(GLOBALVAR_BACKUP_SOURCERESOURCE_NAME);
  var /*String*/ sourceDn = popGlobalVar(GLOBALVAR_BACKUP_SOURCEDN);
  if(sourceDn==&quot;&quot;){
    sourceDn=null;
  }  
  if((sourceViewName!=null) &amp;&amp; (sourceResourceName!=null)){
    meibo.switchToResourceView(sourceResourceName,sourceDn,sourceViewName);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Fonctions concernent la vue de cr&#233;ation d&apos;&#233;venement 
// (Elles sont mise ici dans le script partag&#233; pour pouvoir &#234;tre appel&#233;e depuis le formulaire de cr&#233;ation d&apos;evenement, lors du retour vers la cr&#233;ation de mission)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Met &#224; jour le contenu du tableau avec les &#233;venements s&#233;lectionn&#233;s
 * Cette fonction ne sert que dans le cadre du formulaire de cr&#233;ation de mission
 */
function /*void*/ updateEventsTableContent(){
  //var /*Field2*/ attendeesField =  meibo.getField(&quot;ATTENDEES_TCT_ID&quot;);
  //var /*Attribute*/ values = attendeesField.getValues();
  // on devrait utiliser attendeesField.getValues() conform&#233;ment &#224; la doc, mais en pratique dans notre version la methode n&apos;existe pas
  var /*Attribute*/ values = meibo.getFieldValues(&quot;ATTENDEES_TCT_ID&quot;);
  if(values!=null){
    var /*Field*/table = meibo.getField(&quot;EVENTS_TABLE&quot;);

    var removeBtn = meibo.getField(&quot;REMOVE_BTN&quot;);

    var /*Attribute*/ newValues = new Attribute();
    var /*Set*/ oldValuesSet = new java.util.HashSet();

    // collecte des anciennes valeurs
    for(var i=0; i&lt;table.getLength();i++){
      oldValuesSet.add(table.getRowObject(i));
    }
    // constitution des nouvelles valeurs
    for each(var value in values){
      if(!(oldValuesSet.contains(value))){
        newValues.addValue(value);
      }
    }

    if(newValues.getCount()&gt;0){
    // ajout des nouveaux &#233;venements dans le tableau

      var /*Entry*/ eventEntry = null;
      var /*ResultSet*/ eventRS = null;
      var line = table.getLength();
      var /*Date*/ startDate = null;
      var /*Date*/ endDate = null;
      var /*int*/ duration =0;

      var valStr = newValues.getValues().toString();
      var valStr2 = valStr.substring(1, valStr.length-1); // on supprime les crochets du toString
      
      // recherche des donn&#233;es sur les &#233;venements s&#233;lectionn&#233;s  
      eventRS = meibo.executeResource(&quot;Event&quot;,&quot;fkTCT_ID in (&quot; + valStr2 + &quot;)&quot;,0, &quot;TET_NAME,TCT_START_DATE,TCT_DURATION&quot;);

      for each(var eventEntry in eventRS){
        
        startDate = SQL_DATE_FORMAT.parse(eventEntry.TCT_START_DATE[0]);
        duration = INTEGER_CLASS.parseInt(eventEntry.TCT_DURATION[0]);
        if(duration&gt;0){
          // si un evt dure 1 journ&#233;e par exemple, alors la date de fin est en fait la m&#234;me que la date de d&#233;but, donc on retranche 1 &#224; la dur&#233;e
          duration = duration -1;
        }
        endDate = addDays(startDate, duration);

        if((table.getRowObject(line) == null) || (table.getRowObject(line) != eventEntry.fkTCT_ID[0])){
          table.addRowObject(line, eventEntry.fkTCT_ID[0]);
          table.addCell(line,0,eventEntry.TET_NAME[0]);
          table.addCell(line,1,DATE_FORMAT.format(startDate));
          table.addCell(line,2,DATE_FORMAT.format(endDate));
          table.addCell(line,3,&quot;A DEFINIR&quot;);
          table.addCell(line,4,&quot;A DEFINIR&quot;);
        }
        line++;    
      }
      showEventFieldsForRow(0);  
      removeBtn.show(true);

    }else{
      meibo.getField(&quot;PARTICIPATION_BLOC&quot;).show(false);
      meibo.setFieldValue(&quot;ROW_INDEX&quot;,&quot;-1&quot;);
      removeBtn.show(false);
    }
  }
}

/**
 * Pousse dans la ligne correspondante du tableau les donn&#233;es courantes du formulaire
 * Cette fonction ne sert que dans le cadre du formulaire de cr&#233;ation de mission
 */
function /*void*/ pushEventFieldsDataInTable(){
  var /*Table*/table = meibo.getField(&quot;EVENTS_TABLE&quot;);
  var previousRowIndex= getSelectedRowIndex(); 
  if(previousRowIndex &gt;=0){
    table.addCell(previousRowIndex,1,meibo.getFieldValue(&quot;START_DATE&quot;));
    table.addCell(previousRowIndex,2,meibo.getFieldValue(&quot;END_DATE&quot;));
    table.addCell(previousRowIndex,3,meibo.getFieldValue(&quot;PURPOSE&quot;));
    table.addCell(previousRowIndex,4,meibo.getFieldValue(&quot;INVOLVEMENT&quot;));
  }
}

/**
 * Affiche champs et valeurs correspondants &#224; la ligne rowIndex
 * Cette fonction ne sert que dans le cadre du formulaire de cr&#233;ation de mission
 */
function /*void*/ showEventFieldsForRow(rowIndex){
  var /*Table*/table = meibo.getField(&quot;EVENTS_TABLE&quot;);
  meibo.getField(&quot;PARTICIPATION_BLOC&quot;).show(true);

  // sauvegarder au pr&#233;alable les valeurs des champs
  pushEventFieldsDataInTable();

  var /*String*/ name = table.getCell(rowIndex,0);
  var /*String*/ startDate = table.getCell(rowIndex,1);
  var /*String*/ endDate = table.getCell(rowIndex,2);
  var /*String*/ purpose = table.getCell(rowIndex,3);
  var /*String*/ involvement = table.getCell(rowIndex,4);

  meibo.setFieldValue(&quot;ROW_INDEX&quot;,&quot;&quot;+ rowIndex);
  meibo.setFieldValue(&quot;EVENT_NAME&quot;,name);
  meibo.setFieldValue(&quot;START_DATE&quot;,startDate);
  meibo.setFieldValue(&quot;END_DATE&quot;,endDate);
  meibo.setFieldValue(&quot;PURPOSE&quot;,purpose);
  meibo.setFieldValue(&quot;INVOLVEMENT&quot;,involvement);
}

/**
 * retourne la ligne du tableau s&#233;lectionn&#233;e (-1 si pas de ligne s&#233;lectionn&#233;e)
 */              
function /*int*/ getSelectedRowIndex(){
  var rowIndex = -1;
  if((meibo.getFieldValue(&quot;ROW_INDEX&quot;)!=null) &amp;&amp; (meibo.getFieldValue(&quot;ROW_INDEX&quot;)!=&quot;&quot;)){
    rowIndex= INTEGER_CLASS.parseInt(meibo.getFieldValue(&quot;ROW_INDEX&quot;));
  }
  return rowIndex;
}

/**
 * Pour les ressources qui portent une abbr&#233;viation en plus de l&apos;ID
 * Permet de r&#233;cup&#233;rer l&apos;ID pour une valeur d&apos;abbr&#233;viation 
 */
function /*int*/ getIdFromAbbrev(resourceName, resourcePrefix, abbrev){
  var rs = meibo.executeResource(resourceName, resourcePrefix + &quot;_ABBREV=&apos;&quot;+ abbrev + &quot;&apos;&quot;, 1, resourcePrefix + &quot;_ID&quot;);
  var id = null;
  if((rs!=null) &amp;&amp; (rs.getEntryCount()&gt;0)){
    var entry = rs.getEntry();
    id= entry.getAttributeValue(resourcePrefix + &quot;_ID&quot;,0);
  }else{
    throw &quot;Impossible de recuperer l ID correspondant &#224; la ressource  &quot; + resourceName + &quot; avec l&apos;abbr&#233;viation &quot;  + abbrev;
  }
  return id;
}

/**
 * Met &#224; jour le statut d&apos;une mission
 */
function /*void*/ updateMissionStatus(missionId, actorId, newStatusAbbrev, comment){
  var statusId = getIdFromAbbrev(&quot;Status&quot;,&quot;TST&quot;, newStatusAbbrev);
  var /*Entry*/ missionStatusEntry = new Entry();
  missionStatusEntry.updateAttribute(new Attribute(&quot;TST_ID&quot;,statusId));
  missionStatusEntry.updateAttribute(new Attribute(&quot;PRS_ID&quot;,actorId));
  missionStatusEntry.updateAttribute(new Attribute(&quot;TMN_ID&quot;,missionId));
  missionStatusEntry.updateAttribute(new Attribute(&quot;TST_TMN_DATE&quot;, SQL_DATETIME_FORMAT.format(new java.util.Date())));
  if((comment!=null) &amp;&amp; (comment.length&gt;0)){
    missionStatusEntry.updateAttribute(new Attribute(&quot;TST_TMN_COMMENT&quot;,comment));
  }
  var entryCreationOK = meibo.createEntry(&quot;R_MissionStatus&quot;,null,missionStatusEntry);
  if(!entryCreationOK){
    meibo.logError(&quot;Echec de cr&#233;ation de l&apos;entr&#233;e &quot; + missionStatusEntry);
    throw &quot;Impossible de d&#233;finir le statut de la mission&quot;;
  }
}

/**
 * Met &#224; jour le statut d&apos;un compte-rendu
 */
function /*void*/ updateReportStatus(reportId, actorId, newStatusAbbrev, comment){
  var statusId = getIdFromAbbrev(&quot;Status&quot;,&quot;TST&quot;, newStatusAbbrev);
  var /*Entry*/ reportStatusEntry = new Entry();
  reportStatusEntry.updateAttribute(new Attribute(&quot;TST_ID&quot;,statusId));
  reportStatusEntry.updateAttribute(new Attribute(&quot;PRS_ID&quot;,actorId));
  reportStatusEntry.updateAttribute(new Attribute(&quot;TRT_ID&quot;,reportId));  
  reportStatusEntry.updateAttribute(new Attribute(&quot;PRS_TRT_TST_DATE&quot;, SQL_DATETIME_FORMAT.format(new java.util.Date())));
  if((comment!=null) &amp;&amp; (comment.length&gt;0)){
    reportStatusEntry.updateAttribute(new Attribute(&quot;PRS_TRT_TST_COMMENT&quot;,comment));
  }
  
  var entryCreationOK = meibo.createEntry(&quot;R_ReportStatus&quot;,null,reportStatusEntry);
  if(!entryCreationOK){
    meibo.logError(&quot;Echec de cr&#233;ation &#224; jour de l&apos;entr&#233;e &quot; + reportStatusEntry);
    throw &quot;Impossible de d&#233;finir le statut du compte rendu&quot;;
  }
}

/**
 * Renvoi l&apos;URL de base Meibo &#224; utiliser pour un lien sur une tache de workflow
 */
function /*String*/ getBaseURLForWorkflow(){
  return meibo.getMeiboBaseUrl() + &quot;dsddores?external=true&amp;frames=true&quot;;
}

/**
 * contournement du fonctionnement meibo qui ne prend en compte que la premi&#232;re valeur des champs multivalu&#233;s dans le cas d&apos;une ressource de type base de donn&#233;es
 */
function /*void*/ fixMultiValueFieldsOnSubmit(fieldName){
  var /*Edit*/field = meibo.getField(fieldName);
  if((field.getContents()!=null) &amp;&amp; (field.getContents().length&gt;0)){
    meibo.setFieldValue(fieldName,arrayToString(field.getContents(),DB_MULTIVALUE_SEPARATOR));
  }else{
    meibo.setFieldValue(fieldName,null);
  }
}

/**
 * contournement du fonctionnement meibo qui ne prend en compte que la premi&#232;re valeur des champs multivalu&#233;s dans le cas d&apos;une ressource de type base de donn&#233;es
 */
function /*void*/ fixMultiValueFieldsOnLoad(fieldName){
  var /*Edit*/field = meibo.getField(fieldName);
  if((field.getContent()!=null) &amp;&amp; (field.getContent()!=&quot;&quot;)){
    field.setContents(field.getContent().split(DB_MULTIVALUE_SEPARATOR));
  }else{
    field.setContents(new Array());
  }
}

/**
 * Retourne la date additionn&#233;e de days jours
 * (dates au format Java)
 */
function /*java.util.Date*/ addDays(javaDate, days){
  var /*java.util.Calendar*/ javaCalendar = JAVA_CALENDAR_CLASS.getInstance();
  javaCalendar.setTime(javaDate);
  javaCalendar.add(JAVA_CALENDAR_CLASS.DATE, days);
  return javaCalendar.getTime();
}

/**
 * Renvoi le contenu de la mission au format HTML
 */
function /*String*/ getHtmlMissionContent(missionID){
  var /*String*/ htmlContent=&quot;&lt;table&gt;&lt;tr&gt;&lt;th&gt;&quot; + meibo.getMessage(&quot;eventsTable_name&quot;) + &quot;&lt;/th&gt;&lt;th&gt;&quot; + meibo.getMessage(&quot;eventsTable_date1&quot;) + &quot;&lt;/th&gt;&lt;th&gt;&quot; + meibo.getMessage(&quot;eventsTable_date2&quot;) + &quot;&lt;/th&gt;&lt;th&gt;&quot; + meibo.getMessage(&quot;eventsTable_purpose&quot;) + &quot;&lt;/th&gt;&lt;th&gt;&quot; + meibo.getMessage(&quot;eventsTable_involvement&quot;) + &quot;&lt;/th&gt;&lt;/tr&gt;&quot;;
  
  var /*ResultSet*/ missionRS = meibo.executeResource(&quot;Mission&quot;,&quot;TMN_ID=&quot; + missionID ,1,&quot;PRS_ID&quot;);
  var /*Entry*/ missionEntry = missionRS.getEntry();  
  var /*ResultSet*/ missionEventRS = meibo.executeLink(&quot;MissionEvent&quot;, missionEntry.dn[0],&quot;fkTCT_ID,TET_NAME,displayName&quot;);  
  var /*ResultSet*/ eventAttendeesRS = null;
  var /*Entry*/ eventAttendeesEntry = null;

  for each(var missionEvent in missionEventRS){
    htmlContent= htmlContent +  &quot;&lt;tr&gt;&lt;td&gt;&quot;;
    htmlContent= htmlContent +  missionEvent.displayName[0];
    htmlContent= htmlContent + &quot;&lt;/td&gt;&lt;td&gt;&quot;;
    
    eventAttendeesRS = meibo.executeResource(&quot;R_Attendees&quot;,&quot;PRS_ID=&quot; + missionEntry.PRS_ID[0] + &quot; AND TCT_ID=&quot; + missionEvent.fkTCT_ID[0] ,1,&quot;TPE_NAME,TIN_NAME,RAS_START_DATE,RAS_END_DATE&quot;);
    eventAttendeesEntry = eventAttendeesRS.getEntry();
    if(eventAttendeesEntry!=null){
      htmlContent= htmlContent +  DATE_FORMAT.format(SQL_DATE_FORMAT.parse(eventAttendeesEntry.RAS_START_DATE[0]));
      htmlContent= htmlContent + &quot;&lt;/td&gt;&lt;td&gt;&quot;;
      htmlContent= htmlContent +  DATE_FORMAT.format(SQL_DATE_FORMAT.parse(eventAttendeesEntry.RAS_END_DATE[0]));
      htmlContent= htmlContent + &quot;&lt;/td&gt;&lt;td&gt;&quot;;
      htmlContent= htmlContent +  eventAttendeesEntry.TPE_NAME[0];
      htmlContent= htmlContent + &quot;&lt;/td&gt;&lt;td&gt;&quot;;
      htmlContent= htmlContent +  eventAttendeesEntry.TIN_NAME[0];    
      htmlContent= htmlContent +  &quot;&lt;/td&gt;&lt;/tr&gt;&quot;;
    }else{
      htmlContent= htmlContent + &quot;&lt;/td&gt;&lt;td colspan=&apos;3&apos;&gt;Annul&#233;&lt;/td&gt;&lt;/tr&gt;&quot;;
    }  
  } 
  
  htmlContent= htmlContent +  &quot;&lt;/table&gt;&quot;;
  
  return htmlContent;
}

/////////////////////
//  Fin de script  //
/////////////////////</globalscript>
  <onstartscript class="script">///$debug
/**/
/* Script qui s&apos;ex&#233;cute lors de la connexion de l&apos;application */
/**/

/////////////////////
// Debut du script //
/////////////////////

/////////////////////
//       test      //
/////////////////////

/////////////////////
//    fin  test    //
/////////////////////
 
meibo.logInfo(&quot;Utilisateur connect&#233; : &quot; + meibo.getUserDn());
var currentUserEntry = meibo.getDnEntry(&quot;People&quot;, meibo.getUserDn(),&quot;cn,displayName,givenName,sn,PRS_ID&quot;);
if(currentUserEntry.PRS_ID==null){
  meibo.logWarn(&quot;Pas d&apos;entr&#233;e trouv&#233;e dans la table PERSON pour l&apos;utilisateur connect&#233; : &quot; + meibo.getUserDn());
}else{
  meibo.logDebug(&quot;PRS_ID de l&apos;utilisateur connect&#233; : &quot; + currentUserEntry.PRS_ID[0]);
  meibo.setGlobalVar(GLOBALVAR_CURRENT_USER_ID, currentUserEntry.PRS_ID[0]);
}
meibo.setGlobalVar(GLOBALVAR_CURRENT_USER_ENTRY, currentUserEntry);

//meibo.setUserID(currentUserEntry.PRS_ID[0]);

meibo.showResourceViewCommands(false);

// initialisation des ressources
initializeResources();

/*r&#233;cup&#233;ration des param&#232;tres des fichiers properties (mapping CN de groupes AD / nom de role meibo) /*/
var parameters_groupsMapping = getProvisioningParameters_Droit();
//var parameters_general = getProvisioningParameters_General();
var mailParameters = getProvisioningParameters_Mails();
meibo.setGlobalVar(&quot;MailParameters&quot;, mailParameters);

// M&#233;canisme de filtre sur People r&#233;cup&#233;r&#233; du projet IAM
//Changement du filtre

var filtre = &quot;&quot;;
var resultset = meibo.executeResource(&quot;RoleStatusSansExterne&quot;,&quot;(cn=*)&quot;,0);
if ( resultset.getEntryCount() &gt; 0 ) {
  var i = 0;
  while ( i &lt; resultset.getEntryCount() ){
    var dnGrp = resultset.getEntry(i).getAttributeValue(&quot;dn&quot;);
    if ( i == 0 ){
      filtre = &quot;(memberOf=&quot;+dnGrp+&quot;)&quot;;
    }
    else{
      filtre = filtre + &quot;(memberOf=&quot;+dnGrp+&quot;)&quot;;
    }
    i++;
  }
  if ( i &gt; 1 ){
    filtre = &quot;(|&quot;+filtre+&quot;)&quot;;
  }
}

//
//if ( filtre != &quot;&quot; ){
//  filtre = &quot;(&amp;(!(memberOf=&quot;+parameters_general.get(&quot;BCOM_GGU_USERS_EXTERNAL&quot;)+&quot;))&quot;+filtre+&quot;)&quot;;
//}
//
//else{
//
//
//}

if ( filtre != &quot;&quot; ){
  //meibo.changeResourceFilter(&quot;People&quot;,filtre);
}

//R&#233;cup&#233;ration du DN de l&apos;utilisateur connect&#233;
var userDN = meibo.getUserDn();

if((userDN!=null) &amp;&amp; (userDN!=&quot;&quot;)){

  //affectation des roles
  setUserRoles(userDN);

  //Ajout du DN dans les roles pour le workflow
  userDN = userDN.toLowerCase(); //-- mise en miniscule du DN de de l&apos;utilisateur
  var profilMeibo = meibo.getUserRoles(); //-- r&#233;cup&#233;ration des profil Meibo de l&apos;utilisateur de type Array
  var nbProfil = profilMeibo.length(); //-- Calcul du nombre de profil Meibo de l&apos;utilisateur 
  profilMeibo[nbProfil] = userDN; //-- Ajout du Dn &#224; la fin du tableau des profils meibo de l&apos;utilisateur
  meibo.setWorkflowRoles(profilMeibo); // Initialisation des roles workflow
}
/////////////////////
// fin du script //
/////////////////////</onstartscript>
  <onstopscript class="script">meibo.logInfo(&quot;fin de session de  : &quot; + meibo.getUserDn());</onstopscript>
</globalscripts>
